/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n    query fetchBoard($boardId: ID!) {\n        fetchBoard(boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user {\n            #     _id\n            #     email\n            #     name\n            #     picture\n            #     userPoint {\n            #         _id\n            #         amount\n            #         user\n            #         createdAt\n            #         updatedAt\n            #         deletedAt\n            #     }\n            #     createdAt\n            #     updatedAt\n            #     deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.FetchBoardDocument,
    "\n    query fetchTravelproduct($travelproductId: ID!) {\n        fetchTravelproduct(travelproductId: $travelproductId) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.FetchTravelproductDocument,
    "\n    mutation createTravelproductQuestionAnswer(\n        $createTravelproductQuestionAnswerInput: CreateTravelproductQuestionAnswerInput!\n        $travelproductQuestionId: ID!\n    ) {\n        createTravelproductQuestionAnswer(\n            createTravelproductQuestionAnswerInput: $createTravelproductQuestionAnswerInput\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.CreateTravelproductQuestionAnswerDocument,
    "\n    query fetchTravelproductQuestionAnswers($page: Int, $travelproductQuestionId: ID!) {\n        fetchTravelproductQuestionAnswers(\n            page: $page\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.FetchTravelproductQuestionAnswersDocument,
    "\n    mutation updateTravelproductQuestionAnswer(\n        $updateTravelproductQuestionAnswerInput: UpdateTravelproductQuestionAnswerInput!\n        $travelproductQuestionAnswerId: ID!\n    ) {\n        updateTravelproductQuestionAnswer(\n            updateTravelproductQuestionAnswerInput: $updateTravelproductQuestionAnswerInput\n            travelproductQuestionAnswerId: $travelproductQuestionAnswerId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.UpdateTravelproductQuestionAnswerDocument,
    "\n    mutation createTravelproductQuestion(\n        $createTravelproductQuestionInput: CreateTravelproductQuestionInput!\n        $travelproductId: ID!\n    ) {\n        createTravelproductQuestion(\n            createTravelproductQuestionInput: $createTravelproductQuestionInput\n            travelproductId: $travelproductId\n        ) {\n            _id\n            contents\n            # travelproduct {\n            #     _id\n            #     name\n            #     remarks\n            #     contents\n            #     price\n            #     tags\n            # }\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.CreateTravelproductQuestionDocument,
    "\n    query fetchTravelproductQuestions($page: Int, $travelproductId: ID!) {\n        fetchTravelproductQuestions(page: $page, travelproductId: $travelproductId) {\n            _id\n            contents\n            #     travelproduct {}\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.FetchTravelproductQuestionsDocument,
    "\n    mutation updateTravelproductQuestion(\n        $updateTravelproductQuestionInput: UpdateTravelproductQuestionInput!\n        $travelproductQuestionId: ID!\n    ) {\n        updateTravelproductQuestion(\n            updateTravelproductQuestionInput: $updateTravelproductQuestionInput\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproduct {\n            #     _id\n            #     # name\n            #     remarks\n            #     contents\n            #     price\n            #     tags\n            # }\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.UpdateTravelproductQuestionDocument,
    "\n    query fetchTravelproducts($isSoldout: Boolean, $search: String, $page: Int) {\n        fetchTravelproducts(isSoldout: $isSoldout, search: $search, page: $page) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.FetchTravelproductsDocument,
    "\n    mutation deleteTravelproduct($travelproductId: ID!) {\n        deleteTravelproduct(travelproductId: $travelproductId)\n    }\n": typeof types.DeleteTravelproductDocument,
    "\n    mutation createTravelProduct(\n        $name: String!\n        $remarks: String!\n        $contents: String!\n        $price: Int!\n        $tags: [String!]\n        $travelproductAddress: TravelproductAddressInput\n        $images: [String!]\n    ) {\n        createTravelproduct(\n            createTravelproductInput: {\n                name: $name\n                remarks: $remarks\n                contents: $contents\n                price: $price\n                tags: $tags\n                travelproductAddress: $travelproductAddress\n                images: $images\n            }\n        ) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            # travelproductAddress\n            # buyer\n            # seller\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.CreateTravelProductDocument,
    "\n    mutation updateTravelproduct(\n        $updateTravelproductInput: UpdateTravelproductInput!\n        $travelproductId: ID!\n    ) {\n        updateTravelproduct(\n            updateTravelproductInput: $updateTravelproductInput\n            travelproductId: $travelproductId\n        ) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": typeof types.UpdateTravelproductDocument,
    "\n    mutation createBoardComment($createBoardCommentInput: CreateBoardCommentInput!, $boardId: ID!) {\n        createBoardComment(createBoardCommentInput: $createBoardCommentInput, boardId: $boardId) {\n            _id\n            writer\n            contents\n            rating\n            # user {}\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.CreateBoardCommentDocument,
    "\n    query fetchBoardComments(\n        # $page: Int,\n        $boardId: ID!\n    ) {\n        fetchBoardComments(\n            # page: $page,\n            boardId: $boardId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.FetchBoardCommentsDocument,
    "\n    mutation updateBoardComment(\n        $updateBoardCommentInput: UpdateBoardCommentInput!\n        $password: String\n        $boardCommentId: ID!\n    ) {\n        updateBoardComment(\n            updateBoardCommentInput: $updateBoardCommentInput\n            password: $password\n            boardCommentId: $boardCommentId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.UpdateBoardCommentDocument,
    "\n    query fetchBoards($page: Int, $search: String, $endDate: DateTime, $startDate: DateTime) {\n        fetchBoards(page: $page, search: $search, endDate: $endDate, startDate: $startDate) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            likeCount\n            dislikeCount\n            # images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.FetchBoardsDocument,
    "\n    mutation deleteBoard($boardId: ID!) {\n        deleteBoard(boardId: $boardId)\n    }\n": typeof types.DeleteBoardDocument,
    "\n    query fetchBoardsCount($endDate: DateTime, $startDate: DateTime, $search: String) {\n        fetchBoardsCount(endDate: $endDate, startDate: $startDate, search: $search)\n    }\n": typeof types.FetchBoardsCountDocument,
    "\n    mutation createBoard(\n        $writer: String\n        $password: String\n        $title: String!\n        $contents: String!\n        $youtubeUrl: String\n        $boardAddress: BoardAddressInput\n        $images: [String!]\n    ) {\n        createBoard(\n            createBoardInput: {\n                writer: $writer\n                password: $password\n                title: $title\n                contents: $contents\n                youtubeUrl: $youtubeUrl\n                boardAddress: $boardAddress\n                images: $images\n            }\n        ) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.CreateBoardDocument,
    "\n    mutation updateBoard($updateBoardInput: UpdateBoardInput!, $password: String, $boardId: ID!) {\n        updateBoard(updateBoardInput: $updateBoardInput, password: $password, boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            __typename\n        }\n    }\n": typeof types.UpdateBoardDocument,
    "\n    mutation uploadFile($file: Upload!) {\n        uploadFile(file: $file) {\n            url\n        }\n    }\n": typeof types.UploadFileDocument,
    "\n    mutation loginUser($password: String!, $email: String!) {\n        loginUser(password: $password, email: $email) {\n            accessToken\n            __typename\n        }\n    }\n": typeof types.LoginUserDocument,
    "\n    query fetchUserLoggedIn {\n        fetchUserLoggedIn {\n            _id\n            email\n            name\n        }\n    }\n": typeof types.FetchUserLoggedInDocument,
    "\n    mutation createUser($email: String!, $password: String!, $name: String!) {\n        createUser(createUserInput: { email: $email, password: $password, name: $name }) {\n            _id\n            email\n            name\n            picture\n            # userPoint {\n            #   _id\n            #   amount\n            #   user\n            #   createdAt\n            #   updatedAt\n            #   deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": typeof types.CreateUserDocument,
};
const documents: Documents = {
    "\n    query fetchBoard($boardId: ID!) {\n        fetchBoard(boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user {\n            #     _id\n            #     email\n            #     name\n            #     picture\n            #     userPoint {\n            #         _id\n            #         amount\n            #         user\n            #         createdAt\n            #         updatedAt\n            #         deletedAt\n            #     }\n            #     createdAt\n            #     updatedAt\n            #     deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.FetchBoardDocument,
    "\n    query fetchTravelproduct($travelproductId: ID!) {\n        fetchTravelproduct(travelproductId: $travelproductId) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.FetchTravelproductDocument,
    "\n    mutation createTravelproductQuestionAnswer(\n        $createTravelproductQuestionAnswerInput: CreateTravelproductQuestionAnswerInput!\n        $travelproductQuestionId: ID!\n    ) {\n        createTravelproductQuestionAnswer(\n            createTravelproductQuestionAnswerInput: $createTravelproductQuestionAnswerInput\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.CreateTravelproductQuestionAnswerDocument,
    "\n    query fetchTravelproductQuestionAnswers($page: Int, $travelproductQuestionId: ID!) {\n        fetchTravelproductQuestionAnswers(\n            page: $page\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.FetchTravelproductQuestionAnswersDocument,
    "\n    mutation updateTravelproductQuestionAnswer(\n        $updateTravelproductQuestionAnswerInput: UpdateTravelproductQuestionAnswerInput!\n        $travelproductQuestionAnswerId: ID!\n    ) {\n        updateTravelproductQuestionAnswer(\n            updateTravelproductQuestionAnswerInput: $updateTravelproductQuestionAnswerInput\n            travelproductQuestionAnswerId: $travelproductQuestionAnswerId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.UpdateTravelproductQuestionAnswerDocument,
    "\n    mutation createTravelproductQuestion(\n        $createTravelproductQuestionInput: CreateTravelproductQuestionInput!\n        $travelproductId: ID!\n    ) {\n        createTravelproductQuestion(\n            createTravelproductQuestionInput: $createTravelproductQuestionInput\n            travelproductId: $travelproductId\n        ) {\n            _id\n            contents\n            # travelproduct {\n            #     _id\n            #     name\n            #     remarks\n            #     contents\n            #     price\n            #     tags\n            # }\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.CreateTravelproductQuestionDocument,
    "\n    query fetchTravelproductQuestions($page: Int, $travelproductId: ID!) {\n        fetchTravelproductQuestions(page: $page, travelproductId: $travelproductId) {\n            _id\n            contents\n            #     travelproduct {}\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.FetchTravelproductQuestionsDocument,
    "\n    mutation updateTravelproductQuestion(\n        $updateTravelproductQuestionInput: UpdateTravelproductQuestionInput!\n        $travelproductQuestionId: ID!\n    ) {\n        updateTravelproductQuestion(\n            updateTravelproductQuestionInput: $updateTravelproductQuestionInput\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproduct {\n            #     _id\n            #     # name\n            #     remarks\n            #     contents\n            #     price\n            #     tags\n            # }\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.UpdateTravelproductQuestionDocument,
    "\n    query fetchTravelproducts($isSoldout: Boolean, $search: String, $page: Int) {\n        fetchTravelproducts(isSoldout: $isSoldout, search: $search, page: $page) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.FetchTravelproductsDocument,
    "\n    mutation deleteTravelproduct($travelproductId: ID!) {\n        deleteTravelproduct(travelproductId: $travelproductId)\n    }\n": types.DeleteTravelproductDocument,
    "\n    mutation createTravelProduct(\n        $name: String!\n        $remarks: String!\n        $contents: String!\n        $price: Int!\n        $tags: [String!]\n        $travelproductAddress: TravelproductAddressInput\n        $images: [String!]\n    ) {\n        createTravelproduct(\n            createTravelproductInput: {\n                name: $name\n                remarks: $remarks\n                contents: $contents\n                price: $price\n                tags: $tags\n                travelproductAddress: $travelproductAddress\n                images: $images\n            }\n        ) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            # travelproductAddress\n            # buyer\n            # seller\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.CreateTravelProductDocument,
    "\n    mutation updateTravelproduct(\n        $updateTravelproductInput: UpdateTravelproductInput!\n        $travelproductId: ID!\n    ) {\n        updateTravelproduct(\n            updateTravelproductInput: $updateTravelproductInput\n            travelproductId: $travelproductId\n        ) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n": types.UpdateTravelproductDocument,
    "\n    mutation createBoardComment($createBoardCommentInput: CreateBoardCommentInput!, $boardId: ID!) {\n        createBoardComment(createBoardCommentInput: $createBoardCommentInput, boardId: $boardId) {\n            _id\n            writer\n            contents\n            rating\n            # user {}\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.CreateBoardCommentDocument,
    "\n    query fetchBoardComments(\n        # $page: Int,\n        $boardId: ID!\n    ) {\n        fetchBoardComments(\n            # page: $page,\n            boardId: $boardId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.FetchBoardCommentsDocument,
    "\n    mutation updateBoardComment(\n        $updateBoardCommentInput: UpdateBoardCommentInput!\n        $password: String\n        $boardCommentId: ID!\n    ) {\n        updateBoardComment(\n            updateBoardCommentInput: $updateBoardCommentInput\n            password: $password\n            boardCommentId: $boardCommentId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.UpdateBoardCommentDocument,
    "\n    query fetchBoards($page: Int, $search: String, $endDate: DateTime, $startDate: DateTime) {\n        fetchBoards(page: $page, search: $search, endDate: $endDate, startDate: $startDate) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            likeCount\n            dislikeCount\n            # images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.FetchBoardsDocument,
    "\n    mutation deleteBoard($boardId: ID!) {\n        deleteBoard(boardId: $boardId)\n    }\n": types.DeleteBoardDocument,
    "\n    query fetchBoardsCount($endDate: DateTime, $startDate: DateTime, $search: String) {\n        fetchBoardsCount(endDate: $endDate, startDate: $startDate, search: $search)\n    }\n": types.FetchBoardsCountDocument,
    "\n    mutation createBoard(\n        $writer: String\n        $password: String\n        $title: String!\n        $contents: String!\n        $youtubeUrl: String\n        $boardAddress: BoardAddressInput\n        $images: [String!]\n    ) {\n        createBoard(\n            createBoardInput: {\n                writer: $writer\n                password: $password\n                title: $title\n                contents: $contents\n                youtubeUrl: $youtubeUrl\n                boardAddress: $boardAddress\n                images: $images\n            }\n        ) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.CreateBoardDocument,
    "\n    mutation updateBoard($updateBoardInput: UpdateBoardInput!, $password: String, $boardId: ID!) {\n        updateBoard(updateBoardInput: $updateBoardInput, password: $password, boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            __typename\n        }\n    }\n": types.UpdateBoardDocument,
    "\n    mutation uploadFile($file: Upload!) {\n        uploadFile(file: $file) {\n            url\n        }\n    }\n": types.UploadFileDocument,
    "\n    mutation loginUser($password: String!, $email: String!) {\n        loginUser(password: $password, email: $email) {\n            accessToken\n            __typename\n        }\n    }\n": types.LoginUserDocument,
    "\n    query fetchUserLoggedIn {\n        fetchUserLoggedIn {\n            _id\n            email\n            name\n        }\n    }\n": types.FetchUserLoggedInDocument,
    "\n    mutation createUser($email: String!, $password: String!, $name: String!) {\n        createUser(createUserInput: { email: $email, password: $password, name: $name }) {\n            _id\n            email\n            name\n            picture\n            # userPoint {\n            #   _id\n            #   amount\n            #   user\n            #   createdAt\n            #   updatedAt\n            #   deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n": types.CreateUserDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchBoard($boardId: ID!) {\n        fetchBoard(boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user {\n            #     _id\n            #     email\n            #     name\n            #     picture\n            #     userPoint {\n            #         _id\n            #         amount\n            #         user\n            #         createdAt\n            #         updatedAt\n            #         deletedAt\n            #     }\n            #     createdAt\n            #     updatedAt\n            #     deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    query fetchBoard($boardId: ID!) {\n        fetchBoard(boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user {\n            #     _id\n            #     email\n            #     name\n            #     picture\n            #     userPoint {\n            #         _id\n            #         amount\n            #         user\n            #         createdAt\n            #         updatedAt\n            #         deletedAt\n            #     }\n            #     createdAt\n            #     updatedAt\n            #     deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchTravelproduct($travelproductId: ID!) {\n        fetchTravelproduct(travelproductId: $travelproductId) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    query fetchTravelproduct($travelproductId: ID!) {\n        fetchTravelproduct(travelproductId: $travelproductId) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createTravelproductQuestionAnswer(\n        $createTravelproductQuestionAnswerInput: CreateTravelproductQuestionAnswerInput!\n        $travelproductQuestionId: ID!\n    ) {\n        createTravelproductQuestionAnswer(\n            createTravelproductQuestionAnswerInput: $createTravelproductQuestionAnswerInput\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    mutation createTravelproductQuestionAnswer(\n        $createTravelproductQuestionAnswerInput: CreateTravelproductQuestionAnswerInput!\n        $travelproductQuestionId: ID!\n    ) {\n        createTravelproductQuestionAnswer(\n            createTravelproductQuestionAnswerInput: $createTravelproductQuestionAnswerInput\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchTravelproductQuestionAnswers($page: Int, $travelproductQuestionId: ID!) {\n        fetchTravelproductQuestionAnswers(\n            page: $page\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    query fetchTravelproductQuestionAnswers($page: Int, $travelproductQuestionId: ID!) {\n        fetchTravelproductQuestionAnswers(\n            page: $page\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateTravelproductQuestionAnswer(\n        $updateTravelproductQuestionAnswerInput: UpdateTravelproductQuestionAnswerInput!\n        $travelproductQuestionAnswerId: ID!\n    ) {\n        updateTravelproductQuestionAnswer(\n            updateTravelproductQuestionAnswerInput: $updateTravelproductQuestionAnswerInput\n            travelproductQuestionAnswerId: $travelproductQuestionAnswerId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    mutation updateTravelproductQuestionAnswer(\n        $updateTravelproductQuestionAnswerInput: UpdateTravelproductQuestionAnswerInput!\n        $travelproductQuestionAnswerId: ID!\n    ) {\n        updateTravelproductQuestionAnswer(\n            updateTravelproductQuestionAnswerInput: $updateTravelproductQuestionAnswerInput\n            travelproductQuestionAnswerId: $travelproductQuestionAnswerId\n        ) {\n            _id\n            contents\n            # travelproductQuestion {\n            #     _id\n            #     contents\n            # }\n            user {\n                _id\n                name\n                email\n            }\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createTravelproductQuestion(\n        $createTravelproductQuestionInput: CreateTravelproductQuestionInput!\n        $travelproductId: ID!\n    ) {\n        createTravelproductQuestion(\n            createTravelproductQuestionInput: $createTravelproductQuestionInput\n            travelproductId: $travelproductId\n        ) {\n            _id\n            contents\n            # travelproduct {\n            #     _id\n            #     name\n            #     remarks\n            #     contents\n            #     price\n            #     tags\n            # }\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation createTravelproductQuestion(\n        $createTravelproductQuestionInput: CreateTravelproductQuestionInput!\n        $travelproductId: ID!\n    ) {\n        createTravelproductQuestion(\n            createTravelproductQuestionInput: $createTravelproductQuestionInput\n            travelproductId: $travelproductId\n        ) {\n            _id\n            contents\n            # travelproduct {\n            #     _id\n            #     name\n            #     remarks\n            #     contents\n            #     price\n            #     tags\n            # }\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchTravelproductQuestions($page: Int, $travelproductId: ID!) {\n        fetchTravelproductQuestions(page: $page, travelproductId: $travelproductId) {\n            _id\n            contents\n            #     travelproduct {}\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    query fetchTravelproductQuestions($page: Int, $travelproductId: ID!) {\n        fetchTravelproductQuestions(page: $page, travelproductId: $travelproductId) {\n            _id\n            contents\n            #     travelproduct {}\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateTravelproductQuestion(\n        $updateTravelproductQuestionInput: UpdateTravelproductQuestionInput!\n        $travelproductQuestionId: ID!\n    ) {\n        updateTravelproductQuestion(\n            updateTravelproductQuestionInput: $updateTravelproductQuestionInput\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproduct {\n            #     _id\n            #     # name\n            #     remarks\n            #     contents\n            #     price\n            #     tags\n            # }\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation updateTravelproductQuestion(\n        $updateTravelproductQuestionInput: UpdateTravelproductQuestionInput!\n        $travelproductQuestionId: ID!\n    ) {\n        updateTravelproductQuestion(\n            updateTravelproductQuestionInput: $updateTravelproductQuestionInput\n            travelproductQuestionId: $travelproductQuestionId\n        ) {\n            _id\n            contents\n            # travelproduct {\n            #     _id\n            #     # name\n            #     remarks\n            #     contents\n            #     price\n            #     tags\n            # }\n            user {\n                _id\n                email\n                name\n            }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchTravelproducts($isSoldout: Boolean, $search: String, $page: Int) {\n        fetchTravelproducts(isSoldout: $isSoldout, search: $search, page: $page) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    query fetchTravelproducts($isSoldout: Boolean, $search: String, $page: Int) {\n        fetchTravelproducts(isSoldout: $isSoldout, search: $search, page: $page) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteTravelproduct($travelproductId: ID!) {\n        deleteTravelproduct(travelproductId: $travelproductId)\n    }\n"): (typeof documents)["\n    mutation deleteTravelproduct($travelproductId: ID!) {\n        deleteTravelproduct(travelproductId: $travelproductId)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createTravelProduct(\n        $name: String!\n        $remarks: String!\n        $contents: String!\n        $price: Int!\n        $tags: [String!]\n        $travelproductAddress: TravelproductAddressInput\n        $images: [String!]\n    ) {\n        createTravelproduct(\n            createTravelproductInput: {\n                name: $name\n                remarks: $remarks\n                contents: $contents\n                price: $price\n                tags: $tags\n                travelproductAddress: $travelproductAddress\n                images: $images\n            }\n        ) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            # travelproductAddress\n            # buyer\n            # seller\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation createTravelProduct(\n        $name: String!\n        $remarks: String!\n        $contents: String!\n        $price: Int!\n        $tags: [String!]\n        $travelproductAddress: TravelproductAddressInput\n        $images: [String!]\n    ) {\n        createTravelproduct(\n            createTravelproductInput: {\n                name: $name\n                remarks: $remarks\n                contents: $contents\n                price: $price\n                tags: $tags\n                travelproductAddress: $travelproductAddress\n                images: $images\n            }\n        ) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            # travelproductAddress\n            # buyer\n            # seller\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateTravelproduct(\n        $updateTravelproductInput: UpdateTravelproductInput!\n        $travelproductId: ID!\n    ) {\n        updateTravelproduct(\n            updateTravelproductInput: $updateTravelproductInput\n            travelproductId: $travelproductId\n        ) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"): (typeof documents)["\n    mutation updateTravelproduct(\n        $updateTravelproductInput: UpdateTravelproductInput!\n        $travelproductId: ID!\n    ) {\n        updateTravelproduct(\n            updateTravelproductInput: $updateTravelproductInput\n            travelproductId: $travelproductId\n        ) {\n            _id\n            name\n            remarks\n            contents\n            price\n            tags\n            images\n            pickedCount\n            travelproductAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                lat\n                lng\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            buyer {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            seller {\n                _id\n                email\n                name\n                picture\n                # userPoint\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            soldAt\n            createdAt\n            updatedAt\n            deletedAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBoardComment($createBoardCommentInput: CreateBoardCommentInput!, $boardId: ID!) {\n        createBoardComment(createBoardCommentInput: $createBoardCommentInput, boardId: $boardId) {\n            _id\n            writer\n            contents\n            rating\n            # user {}\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation createBoardComment($createBoardCommentInput: CreateBoardCommentInput!, $boardId: ID!) {\n        createBoardComment(createBoardCommentInput: $createBoardCommentInput, boardId: $boardId) {\n            _id\n            writer\n            contents\n            rating\n            # user {}\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchBoardComments(\n        # $page: Int,\n        $boardId: ID!\n    ) {\n        fetchBoardComments(\n            # page: $page,\n            boardId: $boardId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    query fetchBoardComments(\n        # $page: Int,\n        $boardId: ID!\n    ) {\n        fetchBoardComments(\n            # page: $page,\n            boardId: $boardId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBoardComment(\n        $updateBoardCommentInput: UpdateBoardCommentInput!\n        $password: String\n        $boardCommentId: ID!\n    ) {\n        updateBoardComment(\n            updateBoardCommentInput: $updateBoardCommentInput\n            password: $password\n            boardCommentId: $boardCommentId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation updateBoardComment(\n        $updateBoardCommentInput: UpdateBoardCommentInput!\n        $password: String\n        $boardCommentId: ID!\n    ) {\n        updateBoardComment(\n            updateBoardCommentInput: $updateBoardCommentInput\n            password: $password\n            boardCommentId: $boardCommentId\n        ) {\n            _id\n            writer\n            contents\n            rating\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchBoards($page: Int, $search: String, $endDate: DateTime, $startDate: DateTime) {\n        fetchBoards(page: $page, search: $search, endDate: $endDate, startDate: $startDate) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            likeCount\n            dislikeCount\n            # images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    query fetchBoards($page: Int, $search: String, $endDate: DateTime, $startDate: DateTime) {\n        fetchBoards(page: $page, search: $search, endDate: $endDate, startDate: $startDate) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            likeCount\n            dislikeCount\n            # images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation deleteBoard($boardId: ID!) {\n        deleteBoard(boardId: $boardId)\n    }\n"): (typeof documents)["\n    mutation deleteBoard($boardId: ID!) {\n        deleteBoard(boardId: $boardId)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchBoardsCount($endDate: DateTime, $startDate: DateTime, $search: String) {\n        fetchBoardsCount(endDate: $endDate, startDate: $startDate, search: $search)\n    }\n"): (typeof documents)["\n    query fetchBoardsCount($endDate: DateTime, $startDate: DateTime, $search: String) {\n        fetchBoardsCount(endDate: $endDate, startDate: $startDate, search: $search)\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createBoard(\n        $writer: String\n        $password: String\n        $title: String!\n        $contents: String!\n        $youtubeUrl: String\n        $boardAddress: BoardAddressInput\n        $images: [String!]\n    ) {\n        createBoard(\n            createBoardInput: {\n                writer: $writer\n                password: $password\n                title: $title\n                contents: $contents\n                youtubeUrl: $youtubeUrl\n                boardAddress: $boardAddress\n                images: $images\n            }\n        ) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation createBoard(\n        $writer: String\n        $password: String\n        $title: String!\n        $contents: String!\n        $youtubeUrl: String\n        $boardAddress: BoardAddressInput\n        $images: [String!]\n    ) {\n        createBoard(\n            createBoardInput: {\n                writer: $writer\n                password: $password\n                title: $title\n                contents: $contents\n                youtubeUrl: $youtubeUrl\n                boardAddress: $boardAddress\n                images: $images\n            }\n        ) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            # likeCount\n            # dislikeCount\n            images\n            boardAddress {\n                _id\n                zipcode\n                address\n                addressDetail\n                createdAt\n                updatedAt\n                deletedAt\n            }\n            # user\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateBoard($updateBoardInput: UpdateBoardInput!, $password: String, $boardId: ID!) {\n        updateBoard(updateBoardInput: $updateBoardInput, password: $password, boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation updateBoard($updateBoardInput: UpdateBoardInput!, $password: String, $boardId: ID!) {\n        updateBoard(updateBoardInput: $updateBoardInput, password: $password, boardId: $boardId) {\n            _id\n            writer\n            title\n            contents\n            youtubeUrl\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation uploadFile($file: Upload!) {\n        uploadFile(file: $file) {\n            url\n        }\n    }\n"): (typeof documents)["\n    mutation uploadFile($file: Upload!) {\n        uploadFile(file: $file) {\n            url\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation loginUser($password: String!, $email: String!) {\n        loginUser(password: $password, email: $email) {\n            accessToken\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation loginUser($password: String!, $email: String!) {\n        loginUser(password: $password, email: $email) {\n            accessToken\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query fetchUserLoggedIn {\n        fetchUserLoggedIn {\n            _id\n            email\n            name\n        }\n    }\n"): (typeof documents)["\n    query fetchUserLoggedIn {\n        fetchUserLoggedIn {\n            _id\n            email\n            name\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createUser($email: String!, $password: String!, $name: String!) {\n        createUser(createUserInput: { email: $email, password: $password, name: $name }) {\n            _id\n            email\n            name\n            picture\n            # userPoint {\n            #   _id\n            #   amount\n            #   user\n            #   createdAt\n            #   updatedAt\n            #   deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"): (typeof documents)["\n    mutation createUser($email: String!, $password: String!, $name: String!) {\n        createUser(createUserInput: { email: $email, password: $password, name: $name }) {\n            _id\n            email\n            name\n            picture\n            # userPoint {\n            #   _id\n            #   amount\n            #   user\n            #   createdAt\n            #   updatedAt\n            #   deletedAt\n            # }\n            createdAt\n            updatedAt\n            deletedAt\n            __typename\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;